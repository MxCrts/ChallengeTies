const admin = require("firebase-admin");
const path = require("path");

// V√©rifie si Firebase Admin est d√©j√† initialis√©
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(
      path.resolve(__dirname, "serviceAccountKey.json")
    ),
  });
}

const db = admin.firestore();

const createChatsForExistingChallenges = async () => {
  try {
    const challengesSnapshot = await db.collection("challenges").get();
    if (challengesSnapshot.empty) {
      console.log("‚ö† Aucun challenge trouv√© dans Firestore.");
      return;
    }

    const batch = db.batch();
    let createdChats = 0;

    console.log("üîÑ Cr√©ation des chats en cours...");

    for (const doc of challengesSnapshot.docs) {
      const challengeData = doc.data();
      const chatId = challengeData.chatId || doc.id; // Utilisation de chatId existant ou ID du challenge
      const chatRef = db.collection("chats").doc(chatId);

      // V√©rifier si le chat existe d√©j√†
      const chatDoc = await chatRef.get();
      if (chatDoc.exists) {
        console.log(`üîµ Chat d√©j√† existant pour : ${challengeData.title}`);
        continue;
      }

      batch.set(chatRef, {
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        description: `Chat pour le challenge : ${
          challengeData.title || "Sans titre"
        }`,
        challengeId: doc.id, // Ajoute un lien au challenge
        participantsCount: 0, // Initialisation des participants
      });

      createdChats++;
    }

    if (createdChats > 0) {
      await batch.commit();
      console.log(`‚úÖ ${createdChats} nouveaux chats cr√©√©s avec succ√®s !`);
    } else {
      console.log("‚ö† Aucun nouveau chat √† cr√©er.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation des chats :", error);
  }
};

// Ex√©cute le script
createChatsForExistingChallenges();
